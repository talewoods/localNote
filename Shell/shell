shell教程

      #！告诉系统其路径所指定的程序即是解释此脚本的Shell程序

      运行脚本的两种方式
      1.  chmod +x ./test.sh
          ./test.sh
      2.  /bin/sh test.sh



Shell变量
     
      定义变量时，变量名不加美元符号；变量名和等号之间不能有空格；
      变量名首字母必须为字母；
      
      使用变量
            echo $name   
            echo ${name} 变量名外面的花括号是可选的，加花括号是为了帮助解释器识别变量的边界
      只读变量
            readonly name
      删除变量
            unset name



字符串
     
     单引号字符串的限制：
                   单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的；
                   单引号字串中不能出现单引号（对单引号使用转义符后也不行）

     双引号的优势：
                   双引号里可有变量
                   双引号里可以出现转义字符
                
     获取字符串长度：  ${#name}
     提取子字符串  ：  ${name:1:4}  #4为长度
     查找子字符串  ：  expr index s1 s2

Shell 数组
   
      定义数组 
          在Shell 中，用括号来表示数组，数组元素用空格符分割
          数组名=(值1 值2 ...)
          单独定义数组的各个分量 array[0]=value
      读取数组
         value=${数组名[下标]}
      获取数组长度
         length=${#array[@]} 或 length=${#array[*]}
 











################################################################################
Linux Shell 脚本攻略



脚本的运行方式
              
终端打印
     echo  printf
     
     使用不带引号的echo时，没法在所要显示的文本中使用分号，因为分号在Bash中被用
     做命令定界符
     单引号
     双引号: 引用变量，命令替换，转义   需要-e选项

     设置颜色
     echo -e "\e[1;31m This is red text \e[0m"

    
玩转变量和环境变量


     var=value 不同于var = value 前者是赋值，后者是相等操作

     当应用程序执行时，它接受一组环境变量。可以使用env命令查看所有与终端相关的环
     境对于进程来说，其运行时的环境变量可以使用
            cat /proc/$PID/environ 
     其中PID设置成相关进程的进程ID ,pgrep gedit 可以查看进程gedit的进程号。上面
     的命令返回一个包含环境变量以及对应变量值的列表，彼此之间由null(\0)分隔。
            cat /proc/$PID/environ | tr '\0' '\n'


     export 设置环境变量
     PATH="$PATH:/home/user/bin"
     export PATH



     获得字符串长度  length=${#var}
     系统变量 SHELL USER PWD UID HOME 超级用户的UID为零
     颜色设置 \[\e[F;Bm\] F为字体颜色 B为背景色  \[\e[0m\]关闭颜色；\u 用户\w工
     作目录\h主机名\t时间


使用Shell进行数学计算

     let
     $[]
     $(( ))
     $(expr $a+5)
     bc计算器   scale=2;设置小数位个数 obase 设置输出进制
 

文件描述符及重定向

     0 标准输入   1 标准输出  2标准错误
     将输出文本重定向或保存到一个文件    echo "This is a sample text" >temp.txt
     将文本追加到目标文件                echo "This is a sample text" >>temp.txt
     将stderr重定向到文件                ls + 2>out.txt
     
     tee 命令既可以将数据重定向到文件，还可以提供提供一份重定向数据的副本作为后续命令的stdin
               cat a* | tee out.txt |cat -n
     cat -n 将从stdin中接收到的每行数据前加上行号并写入stdout; tee -a选项表示追加
     
     < << 表示输入重定向，用于从文件中读取到stdin
        

    自定义文件描述符
    只读模式   
               echo this is a a test line>input.txt        
               exec 3<input.txt
               cat <&3
    截断写入模式
               exec 4>output.txt
               echo newline >&4
               cat output.txt
    追加写入模式
               exec 5>>input.txt
               echo appended line >&5
               cat input.txt
  


数组

   array_val=(1 2 3 4 5)
   array_val[0]=test1
   ${array_val[0]}     ${array_val[*]}     ${#array_val[*]}

   定义关联数组
   declare -A array
   初始化
   array=([index1]=val1 [index2]=val2)
   array[index1]=val1
   获取索引列表
   ${!array[*]} ${!array[@]}

使用别名
   
   alias install='sudo apt-get install'

   alias 命令作用只是暂时的，一旦关闭终端，所有设置的别名失效。为了使别名设置
   一直起作用，可以将它放入～/.bashrc文件。因为每当一个shell进程生成时，都会
   执行～/.bashrc中的命令

   删除别名 unalias  或者 alias command=
   alias rm='cp $@ ~/backup && rm $@    删除原始文件同时在backup目录中保留副本
   
   对别名进行转义 \command,对命令实施转义，使我们可以执行原本的命令，而不是这
   些命令的别名替身


获取终端信息
   tput 
   stty


获取设置日期和延迟

     读取日期  date
     打印纪元时间 date +%s
     
     date --date "Jan 20 2001" +%A  获取指定日期是星期几
     date --date "Jan 20 2001" +%s  获取纪元时间

     date "+%d %b %y" 打印对应格式的日期
     date -s “21 June 2009 11：01：22” 设置日期
     
     星期 %a %A  年 %y %Y 月 %b %B 日 %d %D 时%H %I 分%M 秒 %S 纪元时 %s  
     MM/dd/yy %D

     sleep 1 延时 1秒钟


调试脚本

   bash -x test.sh
   对脚本局部调试  
         set -x 在执行时显示参数和命令     set +x 禁止调试
         set -v 当命令进行读取时显示输入   set +v 禁止打印输入
   在脚本头部 #！ /bin/bash -vx
   自定义


函数定义            function fname(){}            fname(){}
函数调用            fname arg1 arg2    或不带参数 fname
函数中调用参数      $0 $1 $n $# $@  被扩展为 "$1" "$2" 等 $*被扩展为"$1 $2 $3"
导出函数            export -f fname


将命令序列的输出读入变量

          子shell方法  cmd_output=$(COMMANDS)
          命令替换     cmd_output=`COMMANDS`
          子shell本身是独立进程，当命令在子shell中执行时，不会对当前shell有影响
          通过引用子shell的方式保留空格和换行符
                       out="$(COMMANDS)"



read 不用回车读取字符

          从输入中读入n个字符并存入变量中 read -n numberofchars variable_name
          无回显的方式读取 read -s var
          显示提示信息 read -p "Enter a input" var
          在特定时限内读取输入  read -t timeout var
          用特定字符作为输入行的结束 read -d delim_char var


运行命令直到成功

         repeat()
         {
             while :
               do 
                   $@ && return 
                   是sleep 30
               done
         }


    
IFS 子段分隔符
for 循环        
          for var in list    
          do
             commands
          done
          list 可以是一个字符串，也可以是一个序列

          for ((i=0;i<10;i++))
          {
             commands
          }

          while condition
          do 
             commands
          done
          
          until 条件
          do
             commands
          done

if语句

          if condition;
          then
             commands;
          fi

          if condition;
          then
             commands;
          else if condition; then
               commands;
          else
               commands;
          fi


          [ condition ]&& action 如果为真则执行action
          [ condition ]|| action 如果为假则执行action

算数比较
         -eq 相等 -gt 大于 -lt 小于 -ge 大于等于 -le 小于等于
         条件放在在封闭的中括号内，[或]与操作数之间有一个空格

字符串比较
        
        [[ $str1 = $str2 ]] 或者 [[ $str1 == $str2 ]]
        [[ $str1 != $str2 ]]
        [[ $str1 < $str2 ]]
        [[ -z $str1 ]] 空字符串
        [[ -n $str2 ]] 非空字符串
test 命令
 


Chapter 2

用cat进行拼接

         cat 命令不仅可以读取文件，拼接数据，还能够从标准输入中进行读取。从标准
         输入中读取需要使用管道操作符
                       Command | cat
         echo 'Text through stdin' | cat - file.txt 中-表示标准输入的文本
         cat file1 file2
         
         cat -s file.txt 压缩空白行
         cat -n file.txt 显示行号
         cat -T file.txt 标示制表符

        
录制并回放终端会话

          script -t 2> timing.log -a output.session
          type commands;
          ..........
          exit

          回放
          scriptreplay timing.log output.session
          
          timing.log用于存储时序信息，描述每个命令在何时运行；output.session用
          于存储命令输出。-t 选项用于将时序数据导入stderr。2>用于将stderr重定向
          到timing.log


find

     find /usr -name "*.txt"  iname 不区分大小写
     find /usr -path "*/linux/*"
     find /usr -regex ".*\.py\|\.sh\)$" 匹配正则表达式
     find .. ! -path "" ! -name ""      参数否定
     
     按照目录深度 -mindepth  -maxdepth
     按照文件类型 find .. -type d                          d目录 f普通文件 l符号链接 
     按照时间     -atime 用户最近一次访问文件的时间； -mtime 最后一次被修改的时间；-ctime 文件元数据最后一次改变的时间； 单位是天 +表示大于，-表示小于。
     按照文件大小 -size 2k ;-size +2k ;-size -2k ; 文件大小的其他单位 b块(512字节）c字节 w字 k1024字节 M1024k  G1024M
     删除匹配的文件 -delete     find . -name "*.txt" -delete
     按照权限      find . -type f -perm 644  权限为644 的普通文件
     按照用户名或者UID  -user 
     -exec   find .. -type d -exec cat {} \; 多个命令时 find .. -type d -exec ./try.sh {} \;
     find 过滤一些目录
            find devel/source \( -name ".git" -prune \) -o \( -type f -print \)

 


玩转xargs

         将多行输入转换成单行输出
                       cat a.txt | xargs  利用xargs，我们可以用空格替换掉换行符
         将单行输入转换成多行输出
                       cat a.txt | xargs -n 3  空格是默认的定界符
         指定定界符     echo "splitXsplitXsplitXsplit" | xargs -d X        xargs 的默认分界符为回车，参数的默认分界符为空格
     
         读取stdin，将格式化参数传递给命令
                    cat args.txt | xargs -n 1 ./try.sh
                    cat args.txt | xargs -I {} ./try.sh -p {} -l 

         结合find使用xargs
                    find . -type f -name "*txt" -print0 | xargs -0 rm -f
                    find . -type f -name "*.c" -print0 | xargs -0 wc -l

         结合stdin，巧妙运用while语句和子shell
                    cat file.txt | (while read arg; do cat $arg; done)
                    子shell操作符内部的多个命令可作为一个整体运行   cmd0 | (cmd1; cmd2;cmd3) | cmd4



用tr进行转换


            tr只能通过stdin,而无法通过命令行参数来接受输入。
                          tr [options] set1 set2
            将来自stdin的输入字符从set1映射到set2，然后将输出写入stdout。set1和set2是字符类或字符集。
            如果俩个字符集的长度不相等，那么set2会不断重复其最后一个字符，直到长度与set1相同。如果set2
            的长度大于set1，那么在set2中超出set1长度的那部分字符则全部被忽略。

            
            ROT13加密算法     echo "tr came ,tr saw, tr conquered." | tr 'a-zA-Z' 'n-za-mN-ZA-M'
            
            用tr删除字符     tr -d 'set1'
            
            字符集补集       tr -c 'set1' 'set2'

            用tr压缩字符     tr -s 'set1'


md5sum 校验

            生成md5校验码    md5sum file1 file2 file3
            校验             md5sum -c file.md5
            find . -type f -print0 |xargs -0 md5sum >>file
             

gpg 加密文件

          用gpg加密文件    gpg -c filename
          解密文件         gpg filename.gpg
生成密码的hash值

          openssl passwd -1 -salt 'string' PASSWORD



排序、唯一与重复

          sort 命令既可以从特定的文件，也可以从stdin中获取输入，并将输入写入stdout.uniq 的工作方式和sort一样 , uniq 前必须进行排序。

          对一组文件排序 sort file1 file2 file3
                         sort file1 file2 file3 -o sorted.txt

          按照数字排序进行排序    sort -n file.txt
          按照逆序进行排序        sort -r file.txt
          按照月份进行排序        sort -M months.txt
          合并两个已排序过的文件  sort -m sorted1 sorted2
          找出已排序文件中不重复的行   sort file1 file2 | uniq
          sort -z
          
          uniq -u 只显示唯一的行
          uniq -z file 去重并以‘\0'分隔开
          uniq -c 统计各行在文件中出现的次数
          uniq -d 找出文件中重复的行 
          uniq -s -w


临时文件命名与随机数


                创建临时文件   file=`mktemp`
                创建临时文件夹 file=`mktemp -d`
                仅仅是生成文件名，不生成实际的文件或目录   file=`mktemp -u`
                根据模板创建临时文件名 mktemp test.XXX, mktemp 正常工作的前提是保证模板中至少要有3个x。



分割文件和数据


                split -b filename  10k -a 5 -d  filePrefix； 
                      -b表示按照数据块分割其他单位为k，M，G，b, -l 按照行数分割； -a 设置文件名长度; -d以数字为后缀; filePrefix 表示文件名前缀
                                                

 
根据扩展名切分文件名

         ${VAR% .*} 含义从$VAR 中删除位于%右侧的通配符所匹配的字符串。通配符从右向左进行匹配。
         %属于非贪婪操作。它从右到左找出匹配通配符的最短结果。还有另一个操作符%%，这个操作符与%相似，但行为模式却是贪婪的，这意味着它会匹配符合条件的最长的字符串

         ${VAR#*.} 含义从$VAR中删除位于#右侧的通配符所匹配的字符串。通配符从左到右匹配。##从左到右进行匹配。      

交互输入自动化

         expect 命令
         
                         spawn ./interactive.sh
                         expect "Enter number"
                         send "1\n"
                         expect "Enter name"
                         send "hello\n"
                         expect eof 

         ./interactive.sh < input.txt    


正则表达式原理


                ^            行起始标记                                         ^tux 匹配以tux起始的行
                $            行尾标记                                           $tux 匹配以tux结尾的行
                .            匹配任意一个字符                                   Hack.匹配Hackl和Hacki，但不能匹配Hackl2和Hacki1，他只能匹配单个字符
               []            匹配包含在[]内的任意一个字符                       coo[k1] 匹配cook或coo1
               [^]           匹配[^]之外的任意一个字符                          9[^01]匹配92、93
               [-]           匹配[]中指定范围内的任意一个字符                   [1-5] 匹配从1～5的任意一个数字
               ？            匹配之前的项一次或0次                              colou?r 匹配color或colour 但是不能匹配colouur
               +             匹配之前的项1次或多次                              Rollno-9+ 匹配Rollno-99、Rollno-9但不能匹配Rollno-
               *             匹配之前的项0次或多次                              co*l 匹配cl、col、cool等
               ()            创建一个用于匹配的子串                             ma(tri)?x 匹配max或maxtrix
               {n}           匹配之前的项n次                                    [0-9]{3} 匹配任意三个数字
               {n,}          之前的项至少匹配n次                                [0-9]{3,} 匹配任意一个两位或更多位的数字
               {n,m}
               |             交替匹配|两边的任意一项                            Oct(1st|2nd)  匹配Oct 1st 或 Oct 2nd
               \             转义符可以将上面介绍的特殊字符进行转义



grep 文本搜索

           搜索包含特定模式的文本行
                             grep pattern filename 或 grep "pattern" filename
           grep可以从stdin中读取  
                             echo -e "this is a word\nnext line" | grep word 
           单个grep命令也可以对多个文件进行搜索
                             grep "match_text" file1 file2 file3
           用 --color 选项可以在输出行中着重标记匹配到的单词
                             grep word filename --color=auto
           grep命令只解释match-text中的某些特殊字符。如果使用正则表达式，需要添加-E 选项，或者使用egrep命令
                             grep -E "[a-z]+" filename 或者 egrep "[a-z]+" filename
           只输出文件中匹配到的文本部分 使用-o 选项
                             echo this is a line.|egrep -o "[a-z]+\."
           要打印除包含match_pattern 行之外的所有行，
                             grep -v match_pattern file
           统计文件或文本中包含匹配字符串的行数
                             grep -c "text" file
           要统计文件中匹配项的数量
                             echo -e "1234\n\hello\n56" | egrep -o "[0-9]" | wc -l
           打印出包含匹配字符串的行号
                             grep linux -n sample.txt sample1.txt
           打印模式匹配所位于的字符或字节偏移
                             echo gnu is not linux | grep -b -o “not”
           搜索多个文件并找出匹配文本位于那些文件中
                             grep -l linux sample.txt sample2.txt


          补充grep
                
                    -r 递归搜索目录；  -i 是匹配样式不考虑字符的大小写 ； 匹配多个样式 grep -e "pattern" -e "pattern" file 或者 grep -f pat_file file

                    在grep搜索中指定或排除文件
                                       grep "main()" . -r --include *.{c,cpp}
                                       grep "main()" . -r --exclude "README"  如果排除目录 --exclude-dir;
 
                    输出以0值字节作为终结符的文件名  grep "test" file* -lZ | xargs -0 rm

                    grep -q 选项：如果不打算查看匹配的字符串，只是想知道是否成功匹配，根据命令执行成功与否返回退出状态；

                    打印出匹配文本之前或之后的行
                                             seq 10 | grep 5 -A 3   打印匹配之后的3行
                                             seq 10 | grep 5 -B 3   打印匹配之前的3行
                                             seq 10 | grep 5 -C 3   打印匹配之前之后3行


 

用cut按列切分文件
          
           要提取特定的子段或列，若要打印多列需要提供一个由都毫分隔的列号列表； 可以用--complement 选项对提取的字段进行补集运算
                              cut -f 2,3 filename； cut -f3 --complement filename

           cut 也能从stdin中读取输入文本，制表符是字段或列的默认定界符。对于没有定界符的行，会将改行照原样打印出来。如果不想打印可以使用-s 选项。

           cut 指定字段的定界符 使用-d选项
                               cut -f2 -d ";" file

           指定字段的字符或字节范围 -c 表示字符 -b表示字节
                               cut -c 1-5 file; cut -c -5 file ; cut -c 5- file;  cut -c 1-5,6-7 --output-delimiter ","
                               cut -b
                               
使用sed进行文本替换

                     sed 可以替换给定文本中的字符串
                                                  sed 's/pattern/replace_string/' file
                                                  cat file | sed 's/pattern/replace_string/'

                     在默认情况下，sed只会打印替换后的文本。如果需要在替换的同时保存更改，可以使用-i选项，可以将替换结果应用于原文件；
                                                  sed -i 's/text/replace_string/' file     

                     之前看到的sed命令会将每一行中第一处符合模式的内容替换掉，如果要替换所有内容，我们需要在命令尾部加上参数g
                                                  sed 's/pattern/replace_string/g' file

                     字符/在sed中被作为定界符使用。可以使用任意的定界符,当定界符出现在样式内部时，必须用\进行转义
                                                  sed 's:text:replace:g' file


                      sed补充

                              移除空白行 
                                           sed ‘/^$/d' file

                              \b表示一个单词
                                           sed -i 's/\b[0-9]\{3\}\b/NUMBER/g' sed_data.txt
                             
                             &已匹配字符串标记,/w/+ 表示匹配每一个单词
                                          echo this is an example |sed 's/\w\+/[&]/g'     

                             子串匹配标记
                                          echo this is digit 7 in a number | sed 's/digit \([0-9]\)/\1/'
                                          \(pattern\) 用于匹配子串，对于匹配到的第一个子串，其对应的标记为\1.
                             sed 也可以使用双引号，双引号会通过对表达式求值来对其进行扩展。

                             sed -e 'expression' -e 'exprssion'      


使用awk 进行高级文本处理


                       awk 'BEGIN{} {command} END{}' file  或 echo this is a book | awk 'BEGIN {} {command } END{} '
                       工作原理
                                首先执行BEGIN 语句块中的语句；
                                从文件中或stdin中读取一行然后执行command,重复这个过程直到文件读取完毕；
                                当读至输入流末尾时，执行END语句块的语句；

                       
                       特殊变量
                                NR 表示记录数量，在执行过程中对应于当前行号；
                                NF 表示子段数量，在执行过程中对应于当前行的子段数
                                $0 这个变量包含执行过程中当前行的文本内容
                                $1 这个变量包含第一个字段的文本内容
                                $2 这个变量包含第二个字段的文本内容


                       将外部变量值传递给awk
                                            echo |awk -v variable=$var '{print variable}'
                                            echo |awk '{print v1,v2}' v1=$var1 v2=$var2
                                            awk '{print v1,v2}' v1=$var1 v2=$var2 filename


                      用getline 读取行
                                            getline var .变量var就包含了特定行的内容。如果调用不带参数的getline，可以用$0,$1等访问文本；


                      使用过滤模式对awk处理的行进行过滤 
                                            awk 'NR<5'               行号小于5的行
                                            awk 'NR==1,NR==4'        行号在1到5之间
                                            awk '/linux/'            包含样式linux的行(可以用正则表达式来指定模式)
                                            awk '!/linux/'           不包含 包含模式为linux的行
          

                     设置字段定界符,在BEGIN中可以用OFS="delimiter",设置输出字段的定界符
                                            awk -F: '{print $NF}' /etc/passwd
                                            awk 'BEGIN{FS=":"} {print $NF} ' /etc/passwd
                       

                     通过getline从awk中读取命令输出
                                           "command " | getline output
                                           示例  echo | awk '{"grep root /etc/passwd"|getline output; print output}'    

                     awk中使用for循环

                                           for(i=0;i<10;i++){print $i;}
                                           for(i in array) {print array[i];}

                     awk内建的字符串控制函数

                                           length(string)
                                           index(string,search_string) 返回search_string 在字符串的位置
                                           split(string,array,delimiter) 用定界符生成一个字符串列表，并将列表存入数组
                                           substr(string,start-position,end-position) 返回子串
                                           sub(regex,replacement_str,string) 将正则表达式匹配到的第一次内容替换成replacement_str
                                           gsub(regex,replacement_str,string)该函数会替换正则表达式匹配到的所有内容
                                           match(regex,string) 检查正则表达式是否能够匹配字符串，如果匹配则返回非零值；否则返回零。
                                                               match()有两个相关的特殊变量，分别是RSTART和RLENGTH。变量RSTART包含
                                                               正则表达式所匹配内容的起始位置，而变量RLENGTH包含正则表达式所匹配内容的长度。


按列合并多个文件

               paste file1 file2 file3
               paste 默认的定界符是制表符，使用-d 明确指定定界符
                                 paste file1 file2 -d ","     



打印行或样式之间的文本

               
             打印m到n行的文本  
                              awk 'NR==M, NR==N' filename
                              cat filename | awk 'NR==M,NR==N'
             打印处于start_pattern 与 end_pattern 之间的文本
                              awk '/start_pattern/, /end_pattern/' filename


以逆序形式打印行

                tac命令，tac命令中  \n是默认的行分隔符，可以使用-s “分隔符” 选项来指定自己的分隔符
                         tac file1 file2
                         从stdin中读入    seq 5 | stdin

                awk 实现方式

                         seq 9 |\
                         awk '{ lifo[NR]=$0} 
                         END  { for(ino=NR;ino>=0;ino--) {print lifo[ino];}
                              }'
                                
解析email地址与url地址

                email地址  '[A-Za-z0-9.]+@[A-Za-z0-9.]+\.[a-zA-Z]{2,4} 
                url地址    'http://[a-zA-Z0-9.]+\.[a-zA-Z]{2,4}'


在文件中移除包含某个单词的句子

                 sed 's/[^.]*mobile phones[^.]*\.//g'

对目录中的所有文件进行文本替换

                 find .-name *.cpp -print0 | xargs -I {} -0 | sed -i 's/Copyright/Copyleft/g' {}
                 find . -name *.cpp -exec sed -i 's/CopyRight/Copyleft/g' \{\} \;     
                 find . -name *.cpp -exec sed -i 's/Copyright/Copyleft/g' \{\} \+                                #### I don‘t know why?



文本切片

                替换变量内容中的部分文本
                                                   echo ${var/line/Replaced}

                通过指定字符串的起始位置和长度来生成子串,起始字符的索引从0计数，也可以从后向前计数，将最后一个字符索引记为-1.但负数作为索引值必须放到括号内。
                                                   ${var:start_position:length}       



Web页面下载

               用wget下载网页或远程文件   wget URL

               指定从多个URL处进行下载    wget URL1 URL2 URL3
              
               选项-o可以指定一个日志文件而不将日志信息打印到stdout；选项-O指定输出文件名，如果存在同名文件，那么会先将同名文件清空；
                                          wget ftp://example_domain.com/somefile.img -O dload_file.img -o log
               
               选项-t 指定重试次数
                                          wget -t 5 URL  
                                          wget -t 0 URL  wget 不停地进行重试

               补充
               下载限速 --limit-rate     wget  --limit-rate 20k   http://example.com/file.iso;  单位k千字节 m兆字节
               断点续传  如果使用wget进行的下载在完成之前被中断
                                          wget -c URL
               下载整个网站
                                          wget --mirror --convert-links example.com
                                          wget -r -N -l depth -k  example.com         
                                          -r 表示递归；-N表示使用文件的时间戳；-l 表示递归的深度；-k表示将页面的链接转换为本地地址

访问需要认证的HTTP或FTP
               wget --user username --password pass URL
                                    --ask-password


以纯文本的形式下载网页
               
               将网页内容以ASCII编码的形式存储到文本文件
                                                         lynx URL -dump >web.txt
                                                         w3m



cURL 

              将下载的文件输出到终端                      curl URL ； 

              避免curl命令显示进度信息        curl URL --silent -o filename; 
                                              curl 如果不将网页或文件写入stdout，就会将其写入和url中所指定的文件名相同的文件，如果url中找不到文件名，则产生错误

              在下载过程中显示形如 ### 的进度条，用 --progress 代替 --silent

              断点续传
                       curl 能够从特定的文件偏移处继续下载，偏移量以字节为单位         curl URL/file -c offset
                       如果只是想断点续传    curl -c - URL

              用curl设置参照页字符串
                        参照页位于http头部中的一个字符串，用来标识用户是从哪个页面到达当前页面的。
                        curl --referer Referer_URL  target_URL

              用curl设置cookie
                        我们可以用curl 来指定并存储http操作过程中使用到的cookie,多个cookie之间使用分号分隔；
                        curl http://example.com --cookie "user=slynux;pass=hack"

              用curl 设置用户代理字符串
                       如果不指定用户代理，一些检查用户代理的网页就无法显示。比如有些网站只能在IE下工作
                       curl URL --user-agent "Mozilla/5.0"
                       curl -H "Host: www.slynux.org“ -H ”Accept-language:en" URL
              
              限制curl的带宽
                       curl URL --limit-rate 20k
              
              用URL进行认证
                       curl -u user:pass http://test_auth.com
                       curl -u user http://test_auth.com            提示输入密码时输入

              只打印响应头部信息
                       curl -I http://slynux.org
                       curl --head http://slynux.org



解析网站数据

              lynx -dump -nolist http://www.johntorres.net/BoxOfficefemaleList.html |\
              grep -o "Rank-.*"|
              sed -i  's/Rank-\([0-9]*\) *\(.*\)"/\1\t\2/' |
              sort -nk 1 >actressList

图片抓取器及下载工具

              
             picture.sh


网页相册生成器

            generate_album.sh


基于web后端的定义查询工具

             define.sh

查找网站中的无效链接

             find_broken.sh

以Post 方式发送网页并读取响应

            使用curl发送POST请求并读取网站的响应(HTML)格式 -d 表示以POST方式提交用户数据
                                   curl http://book.sarathlakshman.com/lsc/mlogs/submit.php -d "host=test-host & user=slynux"
            使用wget --post-data 
                                   wget http://book.sarathlakshman.com/lsc/mlogs/submit.php --post-data "host=test-host & user=slynux" -O output.htm





B计划
            tar归档
                       用tar对文件进行归档   tar -cf output.tar  source;   -c 为创建文件，-f指定文件名，source 指定目录或文件名
                       用选项-t列出归档文件中包含的文件    tar -tf archive.tar
                       在归档或列出归档文件列表时获得更多文件的信息 -v 选项

                       选项-r 追加文件到归档文件中   tar -rf archive.tar world.txt
                       选项-x 提取文件或文件夹到指定目录  
                                            tar -xvf archive.tar -C /path/to/extraction_directory
                                            tar -xvf archive.tar file1 file4                             //只提取 file1 file4


                       选项-A 合并多个tar文件 tar -Af file1.tar file2.tar
                       通过检查时间戳来更新归档文件中的内容
                                  添加选项可以将指定的任意文件加入到归档文件中。如果同名文件已经存在，那么结果就是归档文件中包含了两个同名的文件。
                                  可以使用-u选项指明:只有比归档文件中的同名文件更新时才会被添加。
                                  tar -uf archive.tar filea
                       选项-u比较归档文件与文件系统中的同名文件是否相同
                                  tar -df archive.tar
                       从归档文件中删除文件
                                  tar -f archive.tar --delete file1 file2
                       压缩tar归档文件：-z file.tar.gz    -j file.tar.bz2   --lzma  file.tar.lzma
                                  tar 能够通过查看输出或输入文件的扩展名来进行压缩。为了让tar 支持扩展名自动进行压缩，使用-a --auto-compress 选项
                                  tar acvf archive.tar.gz filea fileb filec
                       从归档文件中排除部分文件
                                  tar -cf arch.tar * --exclude "*.txt"
                                  tar -cf arch.tar * --exclude "*.txt" -X list 将需要排除的文件放入文件中；
                       在归档完成之后打印出总归档字节数
                                  tar -cf arc.tar * --exclude "*.txt" --totals

使用gzip压缩数据
                       gzip 只能压缩单个文件或数据流，无法对目录和多个文件进行归档，可以先创建tar归档文件，然后再用gzip 进行压缩
                        
                       使用gzip 压缩文件       gzip filename
                       使用gunzip 解压缩文件   gunzip filename.gz
                       列出压缩文件的属性信息  gzip -l test.txt.gz

                       压缩归档文件    
                                     tar -czvvf archive.tar.gz  files
                                     tar -cavvf archive.tar.gz  files
                       创建一个tar归档文件后压缩
                                     tar -cvvf archive.tar files
                                     gzip archive.tar
                       提取经由gzip 压缩的归档文件中的内容
                                     tar -xavf archive.tar.gz -C extract_directory
                       zcat 无需解压缩，直接读取gzip格式文件
                                     zcat test.gz
                       压缩率 分为9级(1-9)       gzip -5 test.img



使用bzip2
                                                

                        bzip2 filename            压缩
                        bunzip2 filename.bzp      解压缩
                        tar -xjvf archive.tar.bz2 提取文件            

使用lzma
                         lzma filename
                         unlzma filename.lzma
                         tar -cvf --lzma archive.tar.lzma files ; 或   tar -cavf archive.tar.lzma files
                         tar -xvf --lzma archive.tar.lzma -C extract_directory ;或 tar -xavf archive.tar.lzma -C extract_directory

                         



                                  
用zip归档和压缩

                        对归档文件采用zip格式进行压缩    zip archive.zip file1 dir1
                        对目录和文件进行递归操作         zip -r archive.zip  folder1 folder2
                        从zip文件中提取内容              unzip file.zip
                       
                        如果需要更新压缩文件的内容，使用选项 -u       zip file.zip -u newfile
                        从压缩文件中删除内容，则使用选项-d            zip -d arc.zip file.txt
                        列出压缩文件中的内容                          unzip -l archive.zip

 
                                                                



创建压缩文件系统

                      添加源目录和文件，创建squashfs文件        
                                        mksquashfs sources compressedfs.squashfs;      source 可以是通配符或文件或目录路径
                      利用环回形式挂载squashfs文件
                                        mkdir /mnt/squash
                                        mount -o loop compressedfs.squashfs /mnt/squash


                      在创建squashfs文件时排除部分文件 选项-e
                                        sudo mksquashfs /etc test.squashfs -e /etc/passwd  /etc/shadow
                      将排除的文件名列表写入文件后，使用选项-ef
                                        sudo mksquashfs /etc test.squashfs -ef excludelist

                      如果希望在排除文件表中使用通配符，可以使用-wildcard 选项

使用rsync 备份系统快照
                     rsync 命令用ssh链接远程主机，因此必须使用user@host这种形式设定远程主机的地址，user表示用户名，host表示远程主机的IP                    



                      将源目录复制到目的端, -a表示进行归档，-v 在stdout上打印出细节信息或进度(递归进行)
                                          rsync -av source_path destination_path
                      将数据备份到远程服务器或主机
                                          rsync -av source_dir  username@host:PATH         (它只会对更改过的文件进行复制)
                      将远程主机上的数据恢复到本地主机
                                          rsync -av username@host:PATH      destination
                      
                      通过网络进行传输时，压缩数据能够明显改善传输效率；使用-z选项指定在网络传输时压缩数据
                      


                      将一个目录中的内容同步到另一个目录               rsync -av /home/test/   /home/backups
                      将包括目录本身在内的内容复制到另一个目录中       rsync -av /home/test    /home/backups


                      在使用rsync 进行归档的过程中排除部分文件    --exclude pattern
                                     rsync -avz /home/code/some_code /mnt/disk/backup/code --exclude "*txt"
                      通过一个列表文件指定需要排除的文件 --exclude-from filePath


                      在更新rsync 备份时，删除不存在的文件. 默认情况下，rsync并不会在目的端删除那些在源端已不存在的文件。
                      如果要删除这些已不存在的文件，使用rsync的  --delete

                                  rsync -avz source destination --delete


用fsarchiver 创建全盘镜像
                    
                     创建文件系统/分区的备份
                           fsarchiver savefs backup.fsa  /dev/sda1；     将/dev/sda/分区备份到 backup.fsa
                     同时备份多个分区
                           fsarchiver savefs backup.fsa   /dev/sda1  /dev/sda2
                     从备份归档中恢复分区
                           fsarchiver restfs backup.fsa  id=0,dest=/dev/sda1 id=1,dest=/dev/sdb1

git基于版本控制的备份


                                       
                              
                                         

