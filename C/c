char* 与 char[]区别

char* s1的s1是指针，指针指向一块内存区域，它指向的内存区域的大小可以随时改变，而且当指针指向常量字符串时，它的内容是不能被修改的；
char s2[]的s2是数组对应着一块内存区域，其地址和容量在生命期里不会改变，只有数组的内容可以改变；


C 语言深度解析

数组与指针

         int* p;
              p称为指针变量，p里存储的内存地址处的内存称为p所指向的内存。指针变量p里面存储的任何数据都将被当作地址处理。


         int* p=null 和 *p=null

              int* p=null;
              定义一个指针变量p，其指向的内存里面保存的是int类型的数据；在定义变量p的同时把p的值设置为0x0，而不是把*p的值设置为0x0；这个过程为初始化。
         
              int *p； *p=null;
              定义了一个指针变量p，其指向的内存里面保存的是int类型的数据；但是这个时候变量p本身的值是多少不得而知，也就是说现在变量p保存的可能是一个非法地址。
              *p=null，即给p指向的内存赋值为NULL；但此时p指向的内存可能是非法的。

              int i=10; int* p=&i; *p=NULL;
              p指向的内存由原来的10变为0了；而p本身的值，即内存地址没有改变；
             
              NULL，0，'\0'
              当常量0处于应该作为指针使用的上下文时，它就做为空指针使用；
                 int *p=0； 不会警告
                 int *p=3； 会警告
              '\0'是一个空字符的常量，它表示一个字符串的结束，它的ASCII值为0；
                 char str[]={'a','b',NULL}; 警告
                 char str[]={'a','b',0} 不会警告

编译器的bug

            char ch=10;
            char *p=(char*)0x12ff7c;
            *p=NULL
            p=NULL

数组的内存空间

           int a[5];
               定义一个数组a时，编译器根据指定的元素个数和元素的类型分配确定大小的一块内存，并把这块内存命名为a。名字a一旦与这块内存匹配就不能改变。
               a[0],a[1]等为a的元素，但并不是元素的名字，数组的每一个元素都是没有名字。

           sizeof()是关键字不是函数，函数求值是在运行时，而关键字求值是在编译的时候；
           &a 表示的是数组的首地址  &a[0] 表示的是数组首元素的地址，值一样但是意义不同
        
           左值与右值  x=y
               左值：在这个上下文环境中，编译器认为x的含义为x所代表的内存区域，这个区域的地址只有编译器知道，在编译的时候确定；
               右值：在这个上下文环境中，编译器认为y的含义为y所代表的内存区域中的值；
               数组作为右值时，代表a的首元素的地址；数组不能作为左值；
               

数组与指针

         数组的声明必须声明元素的个数与类型
         以指针形式访问和以下标形式访问
                    char* p="abcdef";
                    char a[]="abcdef";
         编译器总是把以下标的形式的操作解析为以指针的形式的操作；*(p+4) 先取出p里存储的地址，再加上四个元素的偏移；*(a+4) a代表数组首元素的地址；
         
         a 与&a
           int a[5]={1,2,3,4,5};
           int *ptr=(int*)(&a+1);
           print("%d,%d",*(a+1),*(ptr-1));

         定义为数组声明为指针

            文件一  char a[100];
            文件二  char* a;
         定义为指针声明为数组
            文件一  char* a
            文件二  char a[];


指针数组与数组指针

          int *p1[10];    指针数组   "[]"的优先级比"*"的优先级高
          int (*p2)[10];  数组指针


多位数组和多级指针

          二维数组的内存布局   *与数组指针
          
          一维数组参数  不能向函数传递一个数组

                      void fun(char a[10]){
                           int i=sizeof(a);
                           char c=a[3];
                      }
                      C语言中，当一维数组作为函数参数的时候，编译器总是把它解析成一个指向首元素地址的指针；


         一级指针参数

                     void fun(char* p){
                             char c=p[3];
                     }        
                     int main(){
                          char* p2="abcdefg";
                          fun(p2);
                          return 0;
                     }


                     void GetMemory(char* p,int num){
                          p=(char*)malloc(num*sizeof(char));
                     }
                     int main(){
                        char* str=NULL;
                        GetMemory(str,10);
                     }
###################################################################3

                     void GetMemory(char** p,int num){
                           *p=(char*)malloc(num*sizeof(char));
                     }
                     int main(){
                           char* str=NULL;
                           GetMemory(&str,0);
                     }


二维数组与二级指针参数

        C语言中，当一维数组作为函数参数的时候，编译器总是把它解析成一个指向其首元素地址的指针；
            void(char a[3][4]) 等价于  void(char (*p)[4])或  void fun(char a[][4]);
        二维数组参数和二级指针参数的等效关系
               
                数组参数                              等效的指针参数
                数组的数组  char[3][4]                数组的指针 char (*p)[4];
                指针数组    char* a[5]                指针的指针 char **p;


函数指针的使用

         #include<stdio.h>
         #include<string.h>
         char* fun(char *p1,char *p2){
               .......
         }

        int main(){
            char* (*pf)(char *p1,char* p2);
            pf=&fun;
            (*pf)("aa","bb");
        }


*(int* )&p

        void Function(){

        }

        int main(){
             void (*p)();
             *(int*)&p=(int)Function;
        }




(*(void(*)())0)()



函数指针数组                           //???????????????????????????????????

          char* (*pf[3])(char* p);

          #include<stdio.h>
          #include<string.h>
          char* fun1(char* p){}
          char* fun2(char* p){}
          char* fun3(char* p){}

          int main(){
              char* (*pf[3])(char* p);
              pf[0]=fun1;
              pf[1]=&fun2;
              pf[2]=&fun3;

              pf[0]("fun1");
              pf[1]("fun2");
              pf[2]("fun3");
          }

函数指针数组指针

     char* (* (*pf)[3])char(*p);

     a[1]=1[a]=*(a+1)=*(1+a);
     代码段 函数名为标签  main=&main



野指针

     常见的内存错误及对策
                         指针没有指向一块合法的内存
                         为指针分配的内存太小               对于字符串常量，系统自动添加'\0'
                         (void)malloc(int size)  malloc 函数申请的是连续的一块的内存；
                         malloc函数申请0字节内存不会返回NULL
                         
                         free(p) ：将指针p与内存的关系斩断，但p保存的地址不变，内存内容不变；
                         
